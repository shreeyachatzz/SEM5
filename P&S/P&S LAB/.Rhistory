p_success <- 0.447
# Sample size
n <- 31
# (a) X is distributed as a binomial distribution
# (b) Sketch the probability mass function (PMF)
xx <- seq(0,31,1)
pmf_values <- numeric()
cdf_values <- numeric()
for(i in 1:length(xx))
{
pmf_values[i] = dbinom(xx[i],n,p_success)
}
plot(xx,pmf_values)
# (c) Sketch the cumulative distribution function (CDF)
for(i in 1:length(xx))
{
cdf_values[i] = pbinom(xx[i],n,p_success)
}
# (d) Mean, variance, and standard deviation
mean_x <- n * p_success
variance_x <- n * p_success * (1 - p_success)
std_dev_x <- sqrt(variance_x)
# Print the results
cat("Mean of X:", mean_x, "\n")
cat("Variance of X:", variance_x, "\n")
cat("Standard Deviation of X:", std_dev_x, "\n")
# Plot PMF and CDF
plot(xx, pmf_values, xlab = "Number of Students (X)", ylab = "Probability", main = "Probability Mass Function (PMF) of X")
plot(xx, cdf_values, xlab = "Number of Students (X)", ylab = "Cumulative Probability", main = "Cumulative Distribution Function (CDF) of X")
#Q5
# Given probability
p_success <- 0.447
# Sample size
n <- 31
# (a) X is distributed as a binomial distribution
# (b) Sketch the probability mass function (PMF)
xx <- seq(0,31,1)
pmf_values <- numeric()
cdf_values <- numeric()
for(i in 1:length(xx))
{
pmf_values[i] = dbinom(xx[i],n,p_success)
}
plot(xx,pmf_values)
# (c) Sketch the cumulative distribution function (CDF)
for(i in 1:length(xx))
{
cdf_values[i] = pbinom(xx[i],n,p_success)
}
# (d) Mean, variance, and standard deviation
mean_x <- n * p_success
variance_x <- n * p_success * (1 - p_success)
std_dev_x <- sqrt(variance_x)
# Print the results
cat("Mean of X:", mean_x, "\n")
cat("Variance of X:", variance_x, "\n")
cat("Standard Deviation of X:", std_dev_x, "\n")
x <- c(0, 1, 2, 3, 4)
p_x <- c(0.41, 0.37, 0.16, 0.05, 0.01)
mean_imperf <- weighted.mean(x, p_x)
cat("The average number of imperfections per 10 meters of fabric is:", mean_imperf)
x <- c(0, 1, 2, 3, 4)
p_x <- c(0.41, 0.37, 0.16, 0.05, 0.01)
mean_imperf <- sum(x * p_x)
cat("The average number of imperfections per 10 meters of fabric is:", mean_imperf)
pdf <- function(t) 0.1 * exp(-0.1 * t)
expected_value <- integrate(pdf, lower = 0, upper = Inf)$value
cat("The expected value of T is:", expected_value)
x <- c(0, 1, 2, 3)
p_x <- c(0.1, 0.2, 0.2, 0.5)
cost_price <- 6.00
selling_price <- 12.00
return_price <- 2.00
net_revenue <- x * (selling_price - cost_price)
expected_value <- sum(net_revenue * p_x)
cat("The expected value of Y (net revenue) is:", expected_value)
pdf <- function(x) {
if (x >= 1 && x <= 10) {
return(0.5 * exp(-abs(x)))
} else {
return(0)
}
}
moment_1 <- integrate(function(x) x * pdf(x), lower = 1, upper = 10)$value
pdf <- function(x) {
if (x >= 1 && x <= 10) {
return(0.5 * exp(-abs(x)))
} else {
return(0)
}
}
moment_1 <- integrate(function(x) x * pdf(x), lower = 1, upper = 10)$value
moment_1 <- integrate(function(x) x * pdf(x), lower = 1, upper = 10)$value
pdf <- function(x) {
if (x >= 1 && x <= 10) {
return(0.5 * exp(-abs(x)))
} else {
return(0)
}
}
moment_1 <- integrate(function(x) x * pdf(x), lower = 1, upper = 10)$value
moment_1 <- integrate(function(x) x * pdf(x), lower = 1, upper = 10)$value
pdf <- function(x) {
ifelse(x >= 1 & x <= 10, 0.5 * exp(-abs(x)), 0)
}
moment_1 <- integrate(function(x) x * pdf(x), lower = 1, upper = 10)$value
moment_2 <- integrate(function(x) x^2 * pdf(x), lower = 1, upper = 10)$value
mean <- moment_1
variance <- moment_2 - mean^2
cat("First Moment (E(X)): ", moment_1, "\n")
cat("Second Moment (E(X^2)): ", moment_2, "\n")
cat("Mean: ", mean, "\n")
cat("Variance: ", variance, "\n")
calculate_Y_distribution <- function(x, p_x) {
y <- x^2
p_y <- p_x
return(data.frame(Y = y, Probability = p_y))
}
x <- 1:20
p_x <- (3/4) * (1/4)^(x_values - 1)
calculate_Y_distribution <- function(x, p_x) {
y <- x^2
p_y <- p_x
return(data.frame(Y = y, Probability = p_y))
}
x <- 1:20
p_x <- (3/4) * (1/4)^(x - 1)
y_distribution <- calculate_Y_distribution(x, p_x)
probability_of_Y_for_X_3 <- y_distribution[y_distribution$Y == 9, "Probability"]
expected_values <- sapply(1:5, function(x) {
sum(y_distribution[y_distribution$Y <= x^2, "Probability"] * y_distribution[y_distribution$Y <= x^2, "Y"])
})
variances <- sapply(1:5, function(x) {
sum((y_distribution[y_distribution$Y <= x^2, "Probability"] * y_distribution[y_distribution$Y <= x^2, "Y"])^2) - (expected_values[x])^2
})
cat("Probability distribution of Y = X^2:\n")
print(y_distribution)
cat("\nProbability of Y for X = 3:", probability_of_Y_for_X_3, "\n")
cat("\nExpected Values of Y for X = 1, 2, 3, 4, 5:\n")
print(expected_values)
cat("\nVariances of Y for X = 1, 2, 3, 4, 5:\n")
print(variances)
barplot(y_distribution$Probability, names.arg = y_distribution$Y, xlab = "Y", ylab = "Probability", main = "Probability Distribution of Y = X^2")
calculate_Y_distribution <- function(x, p_x) {
y <- x^2
p_y <- p_x
return(data.frame(Y = y, Probability = p_y))
}
x <- 1:20
p_x <- (3/4) * (1/4)^(x - 1)
y_distribution <- calculate_Y_distribution(x, p_x)
probability_of_Y_for_X_3 <- y_distribution[y_distribution$Y == 9, "Probability"]
expected_values <- sapply(1:5, function(x) {
sum(y_distribution[y_distribution$Y <= x^2, "Probability"] * y_distribution[y_distribution$Y <= x^2, "Y"])
})
variances <- sapply(1:5, function(x) {
sum((y_distribution[y_distribution$Y <= x^2, "Probability"] * y_distribution[y_distribution$Y <= x^2, "Y"])^2) - (expected_values[x])^2
})
cat("Probability distribution of Y = X^2:\n")
print(y_distribution)
#Visualizing the prob distribution
barplot(y_distribution$Probability, names.arg = y_distribution$Y, xlab = "Y", ylab = "Probability", main = "Probability Distribution of Y = X^2")
cat("\nProbability of Y for X = 3:", probability_of_Y_for_X_3, "\n")
cat("\nExpected Values of Y for X = 1, 2, 3, 4, 5:\n")
print(expected_values)
cat("\nVariances of Y for X = 1, 2, 3, 4, 5:\n")
print(variances)
f1<-function(x){
x*0.5*exp(-abs(x))
}
f2<-function(x){
x^2*0.5*exp(-abs(x))
}
moment1<-integrate(f1,1,10)
moment2<-integrate(f2,1,10)
print(moment1$value)
print(moment2$value)
meanval<-moment1$value
print(meanval)
f3<-function(m1,m2){
return (m2-(m1^2))
}
print(meanval)
varval<-f3(moment1$value,moment2$value)
print(varval)
x<-c(0,1,2,3)
probab<-c(0.1,0.2,0.2,0.5)
print(weighted.mean(x,probab))
expval<-(10*weighted.mean(x,probab))-12
print(expval)
cat("The expected value of Y (net revenue) is:", expval)
#or
x<-c(0,1,2,3)
probabx<-c(0.1,0.2,0.2,0.5)
y<-10*x-12
probaby<-probabx
expval<-sum(y*probaby)
print(expval)
#Y = (12X+(3-X)2 - (6*3)) = (10X-12)
x<-c(0,1,2,3)
probab<-c(0.1,0.2,0.2,0.5)
print(weighted.mean(x,probab))
expval<-(10*weighted.mean(x,probab))-12
print(expval)
cat("The expected value of Y (net revenue) is:", expval)
#or
x<-c(0,1,2,3)
probabx<-c(0.1,0.2,0.2,0.5)
y<-10*x-12
probaby<-probabx
expval<-sum(y*probaby)
cat("The expected value of Y (net revenue) is:", expval)
pdf <- function(t){
t*0.1*exp(-0.1*t)
}
expected_value <- integrate(pdf, lower = 0, upper = Inf)$value
cat("The expected value of T is:", expected_value)
x<-c(5,10,15,20,25,30)
print("Max= ",max(x))
x<-c(5,10,15,20,25,30)
print(paste("Max= ",max(x)))
x<-c(5,10,15,20,25,30)
print(paste("Max= ",max(x)))
print(paste("Min= ",min(x)))
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
{
print(paste("Invalid Number entered"))
}else{
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
{
print("Invalid Number entered")
}else{
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
{
print('Invalid Number entered')
}else{
#Q2
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
#Q2
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
if(n<=0)
{
print('Invalid Number entered')
}else{
p<-1;
for (i in 1:n){
p=p*i
}
print(paste("Factorial of ",n," is: ",p))
}
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
{
print('Invalid Number entered')
}else{
#Q2
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
if(n<=0)
{
print('Invalid Number entered')
}else{
p<-1;
for (i in 1:n){
p=p*i
}
print(paste("Factorial of ",n," is: ",p))
}
#Q3
n<-as.integer(readline(prompt="Enter an integer: "))
a<-0
b<-1
if(n<2){
print('Error')
}else{
print(paste(a,',',b))
for(i in 1:n){
a<-b
b<-a+b
print(paste(c,','))
}
}
n<-as.integer(readline(prompt="Enter an integer: "))
b<-1
if(n<2){
print('Error')
}else{
print(paste(a,',',b))
for(i in 1:n-2){
a<-b
b<-a+b
print(paste(b,','))
5
#Q3
n<-as.integer(readline(prompt="Enter an integer: "))
n<-as.integer(readline(prompt="Enter an integer: "))
5
clc
n<-as.integer(readline(prompt="Enter an integer: "))
a<-0
b<-1
if(n<2){
print('Error')
}else{
print(paste(a,',',b))
for(i in 1:n-2){
a<-b
b<-a+b
print(paste(b,','))
}
}
kgk
n<-as.integer(readline(prompt="Enter an integer: "))
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
if(n<=0)
#Q2
n<-as.integer(readline(prompt = "Enter the number whose factorial is to be found: "))
#Using weighted.mean()
x <- c(0, 1, 2, 3, 4)
p_x <- c(0.41, 0.37, 0.16, 0.05, 0.01)
mean_imperf <- weighted.mean(x, p_x)
cat("The average number of imperfections per 10 meters of fabric is:", mean_imperf)
#Using sum()
x <- c(0, 1, 2, 3, 4)
p_x <- c(0.41, 0.37, 0.16, 0.05, 0.01)
mean_imperf <- sum(x * p_x)
cat("The average number of imperfections per 10 meters of fabric is:", mean_imperf)
#Q2.
pdf <- function(t){
t*0.1*exp(-0.1*t)
}
#Using weighted.mean()
x <- c(0, 1, 2, 3, 4)
p_x <- c(0.41, 0.37, 0.16, 0.05, 0.01)
mean_imperf <- weighted.mean(x, p_x)
cat("The average number of imperfections per 10 meters of fabric is:", mean_imperf)
#Using weighted.mean()
x <- c(0, 1, 2, 3, 4)
p_x <- c(0.41, 0.37, 0.16, 0.05, 0.01)
mean_imperf <- weighted.mean(x, p_x)
cat("The average number of imperfections per 10 meters of fabric is:", mean_imperf)
#Q1
r<- punif(45,min=0, max=60)
print(r)
r<- punif(45,min=0, max=60,lower.tail=FALSE)
print(r)
r<- punif(15,min=0, max=60, lower.tail = FALSE)
print(r)
#Q1
r<- 1- punif(45,min=0, max=60)
print(r)
r<- punif(45,min=0, max=60,lower.tail=FALSE)
print(r)
r<- punif(15,min=0, max=60, lower.tail = FALSE)
print(r)
r<- punif(15,min=0, max=60)
print(r)
#Q1
r<- 1- punif(45,min=0, max=60)
print(r)
r<- punif(45,min=0, max=60,lower.tail=FALSE)
print(r)
r<- punif(15,min=0, max=60)
print(r)
#waiting time between 20 and 30 min
#F(30)-F(20)
#P(X<=30)-P(X<=20)
punif(30,min=0, max=60)- punif(20,min=0, max=60)
P(3)<- dexp(3, rate=1/2)
P3 <- dexp(3, rate=1/2)
P3
(b) x<-seq(0,5,by=0.2)
px<-dexp(x,rate=0.5)
plot(x,px, xlab="x", ylab="y", main="pdf of exp dist at lambda=0.5")
c2<-pexp(3,rate=0.5)
print( c2)
##since we need a continuous value we use pexp
Fx<- pexp(x,rate=0.5)##calculating the values of quantile for each value of c2
plot(x,Fx, xlab="x", ylab="y", main="Plot")
(b) x<-seq(0,5,by=0.02)
px<-dexp(x,rate=0.5)
plot(x,px, xlab="x", ylab="y", main="pdf of exp dist at lambda=0.5")
(c) ## to find x<=3 we keep lower.tail=TRUE
c2<-pexp(3,rate=0.5)
print( c2)
##since we need a continuous value we use pexp
Fx<- pexp(x,rate=0.5)##calculating the values of quantile for each value of c2
plot(x,Fx, xlab="x", ylab="y", main="Plot")
(a)P3 <- dexp(3, rate=1/2)
P3
(b) x<-seq(0,5,by=0.02)
px<-dexp(x,rate=0.5)
(b) x<-seq(0,5,0.02)
px<-dexp(x,rate=0.5)
(b) x <- seq(0, 5, 0.02)
px<-dexp(x,rate=0.5)
plot(x,px, xlab="x", ylab="y", main="pdf of exp dist at lambda=0.5")
(c) ## to find x<=3 we keep lower.tail=TRUE
c2<-pexp(3,rate=0.5)
print( c2)
##since we need a continuous value we use pexp
Fx<- pexp(x,rate=0.5)##calculating the values of quantile for each value of c2
plot(x,Fx, xlab="x", ylab="y", main="Plot")
(b) x <- seq(0, 5, 0.002)
px<-dexp(x,rate=0.5)
plot(x,px, xlab="x", ylab="y", main="pdf of exp dist at lambda=0.5")
(c) ## to find x<=3 we keep lower.tail=TRUE
c2<-pexp(3,rate=0.5)
print( c2)
##since we need a continuous value we use pexp
Fx<- pexp(x,rate=0.5)##calculating the values of quantile for each value of c2
plot(x,Fx, xlab="x", ylab="y", main="Plot")
(d)
##(a)
P3 <- dexp(3, rate=1/2)
P3
##(b)
x <- seq(0, 5, 0.002)
px<-dexp(x,rate=0.5)
plot(x,px, xlab="x", ylab="y", main="pdf of exp dist at lambda=0.5")
##(c) ## to find x<=3 we keep lower.tail=TRUE
c2<-pexp(3,rate=0.5)
print( c2)
##since we need a continuous value we use pexp
Fx<- pexp(x,rate=0.5)##calculating the values of quantile for each value of c2
plot(x,Fx, xlab="x", ylab="y", main="Plot")
##(b)
x <- seq(0, 5, 0.2)
px<-dexp(x,rate=0.5)
plot(x,px, xlab="x", ylab="y", main="pdf of exp dist at lambda=0.5")
##(c) ## to find x<=3 we keep lower.tail=TRUE
c2<-pexp(3,rate=0.5)
print( c2)
##since we need a continuous value we use pexp
Fx<- pexp(x,rate=0.5)##calculating the values of quantile for each value of c2
plot(x,Fx, xlab="x", ylab="y", main="Plot")
##(d)
##(e)
n<-1000
x_sim<-rexp(n,rate=0.5)
## rsim iused yo generate a random sample for exp distribution
plot(density(x_sim),xlab="x", ylab="density", main="the distribution")
## rexp iused yo generate a random sample for exp distribution
plot(density(x_sim),xlab="x", ylab="density", main="simulated data from exp distribution at lambda=0.5")
hist(density(x_sim),xlab="x", ylab="density", main="simulated data from exp distribution at lambda=0.5")
hist(x_sim,probability = TRUE,xlab="x", ylab="density", main="simulated data from exp distribution at lambda=0.5")
##(d)
##(e)
n<-1000
x_sim<-rexp(n,rate=0.5)
## rexp iS used yo generate a random sample for exp distribution
plot(density(x_sim),xlab="x", ylab="density", main="simulated data from exp distribution at lambda=0.5")
hist(x_sim,probability = TRUE,xlab="x", ylab="density", main="simulated data from exp distribution at lambda=0.5")
## rexp iS used yo generate a random sample for exp distribution
plot(density(x_sim),xlab="x", ylab="density", main="simulated data from exp distribution at lambda=0.5")
a3_i<-dgamma(3, shape=alpha, scale=beta)
#Q3
alpha<-2
beta<-1/3
a3_i<-dgamma(3, shape=alpha, scale=beta)
print(a3_i)
a3_ii<-pgamma(1, shape=alpha, scale=beta, lower.tail=FALSE)
prob<-0.70
b3<-pgamma(0.70, shape=alpha, scale=beta)
print(b3)
print(a3_ii)
#Q3
alpha<-2
beta<-1/3
a3_i<-dgamma(3, shape=alpha, scale=beta)
print(a3_i)
a3_ii<-pgamma(1, shape=alpha, scale=beta, lower.tail=FALSE)
print(a3_ii)
prob<-0.70
b3<-pgamma(0.70, shape=alpha, scale=beta)
print(b3)
#a
a3_i<-dgamma(3, shape=alpha, scale=beta)
print(a3_i)
a3_ii<-pgamma(1, shape=alpha, scale=beta, lower.tail=FALSE)
print(a3_ii)
#b
prob<-0.70
b3<-pgamma(0.70, shape=alpha, scale=beta)
print(b3)
b3<-qgamma(0.70, shape=alpha, scale=beta)
print(b3)
#b we use qgamma when we need to find something wrt a probability
prob<-0.70
b3<-qgamma(0.70, shape=alpha, scale=beta)
print(b3)
